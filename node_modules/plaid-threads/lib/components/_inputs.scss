//
// Variables
//

$inputs-focus-state-shadow-color: rgba($variables-primary-blue-medium, 0.2);
$inputs-field-height: $variables-spatial-rhythm * 6;
$inputs-toggle-label-background-color: transparent;
$inputs-field-actions-height: $inputs-field-height - 2;
$inputs-field-actions-transparent-background: rgba($variables-white, 0);
$inputs-toggle-light-inner-shadow: rgba($variables-primary-blue-dark, 0.1);


//
// Placeholders
//

::placeholder {
  color: $variables-gray-dark;
}


//
// Input groups
//

.input-group {
  margin-bottom: rem($variables-spacing-small);
  position: relative;

  // Shared state for disabled buttons
  &[disabled],
  &--is-disabled {
    cursor: not-allowed;
    opacity: 0.5;
  }

  // Remove space between bottom of last input and edge of it's container
  &:last-child {
    margin-bottom: 0;
  }

  // By default, float labels are utilized on inputs
  // More information here: http://bradfrost.com/blog/post/float-label-pattern/
  &__label {
    background: $variables-white;
    color: $variables-gray-dark;
    font-size: rem(12);
    left: 0;
    margin-left: rem($variables-spatial-rhythm);
    opacity: 0;
    padding-left: rem($variables-spatial-rhythm);
    padding-right: rem($variables-spatial-rhythm);
    position: absolute;
    top: 0;
    transform: translateY(rem($variables-spacing-small));
    transition-duration: $variables-secondary-easing-duration;
    transition-property: opacity, transform;
    z-index: -1;

    &:hover {
      cursor: text;
    }
  }

  // Default styles for most input fields (email, password, textarea, etc)
  &__field {
    background-color: $variables-white;
    border-color: $variables-gray-light;
    border-radius: $variables-border-radius;
    border-style: solid;
    border-width: 1px;
    color: $variables-primary-blue-medium;
    font-size: rem(16);
    height: rem($inputs-field-height);
    line-height: rem($inputs-field-height);
    outline: none;
    padding-left: rem($variables-spacing-small);
    padding-right: rem($variables-spacing-small);
    transition-duration: $variables-secondary-easing-duration;
    transition-property: border-color, box-shadow;
    transition-timing-function: $variables-secondary-easing;
    width: 100%;

    // Straight forward enough
    &:active,
    &:focus {
      border-color: $variables-gray-medium;
      box-shadow: 0 1px 2px $inputs-focus-state-shadow-color;
      outline: 0;
    }

    // When focused, show the inputs float label and attempt to preserve display
    // of said label when an input is no longer focused but has content
    &--is-valid + .input-group__label,
    &--is-focused + .input-group__label {
      opacity: 1;
      transform: translateY(rem(-$variables-spatial-rhythm));
      z-index: 1;
    }

    // Ensure textarea inputs are at-least somewhat taller than normal inputs
    // and adjust line height to account for text here having the ability
    // to break multiple lines
    &--is-textarea {
      line-height: rem($variables-spatial-rhythm * 3);
      min-height: px($variables-spatial-rhythm * 20);
      overflow: hidden;
      padding-top: rem($variables-spatial-rhythm * 2);
      resize: none;
    }

    // Modifier for selects that zeros-out properties related to appearance and
    // only lets positioning properties remaing
    &--is-select {
      background-color: $inputs-toggle-label-background-color;
      border-color: $inputs-toggle-label-background-color;
      padding-left: 0;
      padding-right: 0;
    }
  }

  // Field actions container: for instances in which fields have actions appended
  // to them like copy, reveal, and delete
  &__field-actions-container   {
    background-image: linear-gradient(to right, $inputs-field-actions-transparent-background 0%, $variables-white 20%);
    border-bottom-right-radius: 4px;
    border-top-right-radius: 4px;
    font-size: rem(14);
    height: rem($inputs-field-actions-height);
    line-height: rem($inputs-field-actions-height);
    margin-bottom: 0;
    margin-top: 0;
    padding-left: rem($variables-spacing-small);
    padding-right: rem($variables-spacing-small);
    position: absolute;
    right: 1px;
    top: 1px;
  }

  // Color and position the actual trigger themselves
  &__field-action-trigger {
    color: $variables-gray-light;
    float: left;
    list-style: none;
    margin-right: rem($variables-spacing-small);
    transition-duration: $variables-secondary-easing-duration;
    transition-property: color;
    transition-timing-function: $variables-secondary-easing;

    // In some but not all cases, an anchor may be wrapping the trigger
    // element's child element e.g. commonly an icon (I know, sorry)
    // the code below ensures appearance remains consistent
    a {
      color: $variables-gray-light;

      &:hover {
        color: $variables-gray-medium;
      }

      &:active {
        color: $variables-gray-dark;
      }
    }

    &:last-child {
      margin-right: 0;
    }

    // Account for the icon font's line-height imperfections
    // and fine-tune the top offset for the field action trigger's icon
    i {
      position: relative;
      top: 2px;
    }
  }

  // By default, the last input-group's margin-bottom is set to zero
  // The --has-margin-bottom modifier addfords an override this dedault via markup
  &--has-margin-bottom {
    margin-bottom: rem($variables-spacing-large);

    // Ensure this modifier has higher specificity
    &:last-child {
      margin-bottom: rem($variables-spacing-large);
    }
  }

  // Modifier that affords inline display of __field and __label elements
  &--is-inline {
    height: rem($inputs-field-height);

    &:after {
      clear: both;
      content: '';
      display: table;
    }

    .input-group__label {
      background-color: $inputs-toggle-label-background-color;
      color: $variables-primary-blue-medium;
      float: left;
      font-size: rem($variables-primary-font-size);
      margin-left: 0;
      opacity: 1;
      padding-left: 0;
      padding-left: 0;
      position: relative;
      top: 50%;
      transform: translateY(-50%);
      width: 40%;
      z-index: 1;
    }

    .input-group__field {
      float: right;
      width: 60%;
    }
  }
}


//
// Invalid state for input groups
//

.input-group--is-invalid {
  .input-group__field {
    border-color: $variables-red-medium;
    box-shadow: 0 1px 2px $variables-red-medium;
    color: $variables-red-dark;
  }

  .input-group__label {
    color: $variables-red-dark;
  }
}


//
// Input toggles
//

.input-group--is-toggle {
  height: px($variables-spatial-rhythm * 3);

  // Hide the native browser checkbox for it's lack of out-of-the-box
  // style-ability. Some call this the "checkbox hack"
  .input-group__field {
    display: none;

    &:checked + .input-group__toggle-trigger {
      background: $variables-primary-blue-medium;
      border-color: $variables-primary-blue-medium;
      box-shadow: inset 0 0 2px $variables-primary-blue-dark;

      .input-group__toggle-state-signifier {
        transform: translateX(px($variables-spatial-rhythm * 2));
      }
    }
  }

  // Because toggles focused states are slightly different from typical inputs,
  // __label elements are visible at all times
  .input-group__label {
    background-color: $inputs-toggle-label-background-color;
    color: $variables-primary-blue-medium;
    cursor: pointer;
    font-size: rem(16);
    margin-left: 0;
    opacity: 1;
    padding-left: 0;
    padding-right: 0;
    transform: translateY(0);
    width: calc(100% - 40px);
    z-index: 1;
  }

  // The __toggle-trigger is what most users will click on to change the state
  // The __label element affords state change of the toggle as well
  .input-group__toggle-trigger {
    background: $variables-gray-medium;
    border-color: $variables-gray-medium;
    border-radius: 50px;
    border-style: solid;
    border-width: 1px;
    box-shadow: inset 0 0 2px $inputs-toggle-light-inner-shadow;
    cursor: pointer;
    height: px($variables-spatial-rhythm * 3);
    position: absolute;
    right: 0;
    transition-duration: $variables-secondary-easing-duration;
    transition-property: background, border;
    transition-timing-function: $variables-secondary-easing;
    width: px($variables-spatial-rhythm * 5);
  }

  // Depending on the toggle's state, the position of the circle within it
  // signifies whether this state is on or off i.e. checked or unchecked
  .input-group__toggle-state-signifier {
    background: $variables-white;
    border-radius: 50%;
    box-shadow: 0 1px 0 $inputs-toggle-light-inner-shadow, inset 0 -1px 1px $variables-gray-medium, inset 0 1px 0 $variables-white;
    display: block;
    height: px(($variables-spatial-rhythm * 3) - 2);
    transform: translateX(1px);
    transition-duration: $variables-secondary-easing-duration;
    transition-property: transform;
    transition-timing-function: $variables-secondary-easing;
    width: px(($variables-spatial-rhythm * 3) - 2);
  }
}
